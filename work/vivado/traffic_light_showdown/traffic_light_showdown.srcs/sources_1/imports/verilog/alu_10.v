/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_10 (
    input [15:0] a,
    input [15:0] b,
    input [0:0] inv,
    input [5:0] alufn_signal,
    output reg [15:0] out,
    output reg [2:0] zvn
  );
  
  
  
  wire [16-1:0] M_adderUnit_out;
  wire [1-1:0] M_adderUnit_z;
  wire [1-1:0] M_adderUnit_v;
  wire [1-1:0] M_adderUnit_n;
  reg [16-1:0] M_adderUnit_a;
  reg [16-1:0] M_adderUnit_b;
  reg [1-1:0] M_adderUnit_alufn0;
  adder_14 adderUnit (
    .a(M_adderUnit_a),
    .b(M_adderUnit_b),
    .alufn0(M_adderUnit_alufn0),
    .out(M_adderUnit_out),
    .z(M_adderUnit_z),
    .v(M_adderUnit_v),
    .n(M_adderUnit_n)
  );
  
  wire [16-1:0] M_multiplyUnit_out;
  reg [16-1:0] M_multiplyUnit_a;
  reg [16-1:0] M_multiplyUnit_b;
  multiply_15 multiplyUnit (
    .a(M_multiplyUnit_a),
    .b(M_multiplyUnit_b),
    .out(M_multiplyUnit_out)
  );
  
  wire [16-1:0] M_booleanUnit_out;
  reg [16-1:0] M_booleanUnit_a;
  reg [16-1:0] M_booleanUnit_b;
  reg [4-1:0] M_booleanUnit_alufn_signal_3_0;
  boolean_16 booleanUnit (
    .a(M_booleanUnit_a),
    .b(M_booleanUnit_b),
    .alufn_signal_3_0(M_booleanUnit_alufn_signal_3_0),
    .out(M_booleanUnit_out)
  );
  
  wire [16-1:0] M_shifterUnit_out;
  reg [16-1:0] M_shifterUnit_a;
  reg [4-1:0] M_shifterUnit_b;
  reg [2-1:0] M_shifterUnit_alufn_signal_1_0;
  shifter_17 shifterUnit (
    .a(M_shifterUnit_a),
    .b(M_shifterUnit_b),
    .alufn_signal_1_0(M_shifterUnit_alufn_signal_1_0),
    .out(M_shifterUnit_out)
  );
  
  wire [16-1:0] M_compareUnit_out;
  reg [1-1:0] M_compareUnit_z;
  reg [1-1:0] M_compareUnit_v;
  reg [1-1:0] M_compareUnit_n;
  reg [2-1:0] M_compareUnit_alufn_signal_2_1;
  compare_18 compareUnit (
    .z(M_compareUnit_z),
    .v(M_compareUnit_v),
    .n(M_compareUnit_n),
    .alufn_signal_2_1(M_compareUnit_alufn_signal_2_1),
    .out(M_compareUnit_out)
  );
  
  reg z;
  
  reg v;
  
  reg n;
  
  reg z_out;
  
  reg v_out;
  
  reg n_out;
  
  reg [15:0] out_intermediate;
  
  always @* begin
    
    case (alufn_signal)
      6'h03: begin
        M_adderUnit_alufn0 = 1'h0;
        M_adderUnit_a = a;
        M_adderUnit_b = 16'h0001;
      end
      6'h04: begin
        M_adderUnit_alufn0 = 1'h0;
        M_adderUnit_a = 16'h0001;
        M_adderUnit_b = b;
      end
      default: begin
        M_adderUnit_alufn0 = alufn_signal[0+0-:1];
        M_adderUnit_a = a;
        M_adderUnit_b = b;
      end
    endcase
    z = M_adderUnit_z;
    v = M_adderUnit_v;
    n = M_adderUnit_n;
    M_multiplyUnit_a = a;
    M_multiplyUnit_b = b;
    M_compareUnit_alufn_signal_2_1 = alufn_signal[1+1-:2];
    M_compareUnit_z = z;
    M_compareUnit_v = v;
    M_compareUnit_n = n;
    M_booleanUnit_alufn_signal_3_0 = alufn_signal[0+3-:4];
    M_booleanUnit_a = a;
    M_booleanUnit_b = b;
    M_shifterUnit_alufn_signal_1_0 = alufn_signal[0+1-:2];
    M_shifterUnit_a = a;
    M_shifterUnit_b = b[0+3-:4];
    
    case (alufn_signal[3+2-:3])
      3'h0: begin
        
        case (alufn_signal)
          6'h02: begin
            out_intermediate = M_multiplyUnit_out;
            z_out = 1'h0;
            v_out = 1'h0;
            n_out = 1'h0;
          end
          default: begin
            z_out = M_adderUnit_z;
            v_out = M_adderUnit_v;
            n_out = M_adderUnit_n;
            out_intermediate = M_adderUnit_out;
          end
        endcase
      end
      default: begin
        z_out = 1'h0;
        v_out = 1'h0;
        n_out = 1'h0;
        
        case (alufn_signal)
          6'h1a: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h1c: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h18: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h17: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h1e: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h11: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h16: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h19: begin
            out_intermediate = M_booleanUnit_out;
          end
          6'h20: begin
            out_intermediate = M_shifterUnit_out;
          end
          6'h21: begin
            out_intermediate = M_shifterUnit_out;
          end
          6'h23: begin
            out_intermediate = M_shifterUnit_out;
          end
          6'h33: begin
            out_intermediate = M_compareUnit_out;
          end
          6'h35: begin
            out_intermediate = M_compareUnit_out;
          end
          6'h37: begin
            out_intermediate = M_compareUnit_out;
          end
          default: begin
            out_intermediate = 16'h0000;
          end
        endcase
      end
    endcase
    
    case (inv)
      1'h1: begin
        out = ~out_intermediate;
        zvn[0+0-:1] = ~n_out;
        zvn[1+0-:1] = ~v_out;
        zvn[2+0-:1] = ~z_out;
      end
      default: begin
        out = out_intermediate;
        zvn[0+0-:1] = n_out;
        zvn[1+0-:1] = v_out;
        zvn[2+0-:1] = z_out;
      end
    endcase
  end
endmodule
