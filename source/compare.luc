module compare (
    input z,
    input v,
    input n,
    input alufn_signal_2_1[2],
    output out[16] 
  ) {
  
  // The signal out is write only and cannot be read.
  // Hence, a signal s is used as a temp variable for the output.
  sig s[16]; 
  
  always {
    s[15:1] = 15b0; 

    
    case(alufn_signal_2_1){
      b01: // 1) if z = 1 means that A - B = 0 => A = B  otherwise A != B 
        s[0] = z;
      b10: // 2) if A - B is negative or(XOR) there is neagtive overflow means B > A 
        s[0] = n ^ v ;
      b11: // 3) either of case 1) or 2) 
        s[0] = z | (n^v) ;
  }
    out = s;
  }
}