module adder (
	input a[16],
	input b[16],
	input alufn0,
	output out[16],
	output z[1],
output v[1],
output n[1]
)

{
  
  sig s[16]; // intermediate signal s(sum) is used to compute z,v,n
  
  always {
    case(alufn0){
      b0: s = a+b;
      b1: s = a-b;
      default: s = 16b0;
    }
    
    n = s[15];
    // connections for Overflow case 1 or case 2 
    // case 1(negative overflow): (MSB_of_A is 1 AND MSB_of_XB is 1 AND MSB_of_S is 0 )
    // case 2(postive overflow) : (MSB_of_A is 0 AND MSB_of_XB is 0 AND MSB_of_S is 1 )
    v = (a[15] & (b[15] ^ alufn0) & !s[15]) | (!a[15] & !(b[15] ^ alufn0) & s[15]); 
    z = ~|s;
    out = s;
    
  	}
